#Prog# ::= #Function_Decl# #Prog# ! #Struct# #Prog# ! #Directive# #Prog# ! $

#Directive# ::= \# #Directive_Word#
#Directive_Word# ::= include < variable > ! define variable #Term# 

#Function_Decl# ::= #Type# variable ( #Arg_List# ) #Body_Ext#
#Arg_List# ::= #Arg# #Arg_Ext# ! $
#Arg_Ext# ::= , #Arg# #Arg_Ext# ! $
#Arg# ::= #Type# variable

#Struct# ::= struct variable { #Struct_List# } ;
#Struct_List# ::= #Arg# ; #Struct_List# ! $

#Body_Ext#::={ #Body# }
#Body#::=#Operator# #Body#!$
#Operator# ::= #Expression#; ! #Statement#
#Expression#::= #Creation_Var# ! #Assign_Ex#
#Statement# ::= #If_State# ! #While_State# ! #For_State# ! #Return_State#
#Return_State# ::= return #Term# ;
#If_State# ::= if ( #Condition# ) #Body_Ext#
#While_State# ::= while ( #Condition# ) #Body_Ext#
#For_State# ::= for ( #Expression# ; #Condition# ; #Expression# ) #Body_Ext#
#Condition# ::= #Arifm_Ex#

#Assign_Ex# ::= variable #Assign#
#Creation_Var# ::= #Type# variable #Assign# 
#Assign# ::= = #Arifm_Ex# ! $
#Arifm_Ex#::=#Term# #Term_Ext# ! ( #Arifm_Ex# )
#Term_Ext#::=#Operation# #Arifm_Ex# #Term_Ext# ! $
#Term# ::= number ! variable
#Operation# ::= + ! - ! / ! * ! < ! > ! >= ! <= ! \!= ! == 
#Type# ::= int ! char ! void ! float ! double ! long ! short ! unsigned